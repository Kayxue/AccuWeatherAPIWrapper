"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccuWeatherAPIError = exports.APIClientBase = exports.CurrentConditionAPI = exports.ForecastAPI = exports.LocationAPI = void 0;
const LocationAPIClient_1 = __importDefault(require("./API/LocationAPIClient"));
exports.LocationAPI = LocationAPIClient_1.default;
const ForecastAPIClient_1 = __importDefault(require("./API/ForecastAPIClient"));
exports.ForecastAPI = ForecastAPIClient_1.default;
const CurrentConditionAPIClient_1 = __importDefault(require("./API/CurrentConditionAPIClient"));
exports.CurrentConditionAPI = CurrentConditionAPIClient_1.default;
const APIClientBase_1 = __importDefault(require("./API/APIClientBase"));
exports.APIClientBase = APIClientBase_1.default;
const AccuWeatherAPIError_1 = __importDefault(require("./Error/AccuWeatherAPIError"));
exports.AccuWeatherAPIError = AccuWeatherAPIError_1.default;
/**
 * A client that provides an interface to all apis
 */
class AccuWeatherClient {
    constructor(options) {
        this.apikey = options.apikey;
        this.language = options.language ?? "en-us";
        this.detail = options.detail ?? false;
        this.offset = options.offset ?? 100;
        this.metric = options.metric ?? false;
        this.location = new LocationAPIClient_1.default(options);
        this.forecast = new ForecastAPIClient_1.default(options);
    }
}
exports.default = AccuWeatherClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9UeXBlU2NyaXB0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdGQUFrRDtBQStGOUMsc0JBL0ZHLDJCQUFXLENBK0ZIO0FBOUZmLGdGQUFrRDtBQStGOUMsc0JBL0ZHLDJCQUFXLENBK0ZIO0FBOUZmLGdHQUFrRTtBQThHOUQsOEJBOUdHLG1DQUFtQixDQThHSDtBQTdHdkIsd0VBQWdEO0FBOEc1Qyx3QkE5R0csdUJBQWEsQ0E4R0g7QUF4RmpCLHNGQUE4RDtBQXlGMUQsOEJBekZHLDZCQUFtQixDQXlGSDtBQWhFdkI7O0dBRUc7QUFDSCxNQUFxQixpQkFBaUI7SUE4QmxDLFlBQW1CLE9BQXFCO1FBQ3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDO1FBQzVDLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztRQUNwQyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSwyQkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSwyQkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDSjtBQXZDRCxvQ0F1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTG9jYXRpb25BUEkgZnJvbSBcIi4vQVBJL0xvY2F0aW9uQVBJQ2xpZW50XCI7XHJcbmltcG9ydCBGb3JlY2FzdEFQSSBmcm9tIFwiLi9BUEkvRm9yZWNhc3RBUElDbGllbnRcIjtcclxuaW1wb3J0IEN1cnJlbnRDb25kaXRpb25BUEkgZnJvbSBcIi4vQVBJL0N1cnJlbnRDb25kaXRpb25BUElDbGllbnRcIjtcclxuaW1wb3J0IEFQSUNsaWVudEJhc2UgZnJvbSBcIi4vQVBJL0FQSUNsaWVudEJhc2VcIjtcclxuaW1wb3J0IHtcclxuICAgIElEYWlseUZvcmVjYXN0RGF0YSxcclxuICAgIElIb3VybHlGb3JlY2FzdERhdGEsXHJcbiAgICBJRGF5TmlnaHRXZWF0aGVyU3VtbWFyeSxcclxuICAgIElIZWFkbGluZURhdGEsXHJcbiAgICBJRGFpbHlGb3JjYXN0RGF0YSxcclxufSBmcm9tIFwiLi9JbnRlcmZhY2VzL0ZvcmVjYXN0QVBJRGF0YVwiO1xyXG5pbXBvcnQge1xyXG4gICAgSUFkbWluQXJlYURhdGEsXHJcbiAgICBJQXV0b0NvbXBsZXRlU2VhcmNoRGF0YSxcclxuICAgIElCYXNlQ2l0eURhdGEsXHJcbiAgICBJQ2l0eURhdGEsXHJcbiAgICBJQ2l0eURldGFpbHMsXHJcbiAgICBJQ291bnRyeURhdGEsXHJcbiAgICBJUmVnaW9uRGF0YSxcclxufSBmcm9tIFwiLi9JbnRlcmZhY2VzL0xvY2F0aW9uQVBJRGF0YVwiO1xyXG5pbXBvcnQge1xyXG4gICAgSVRvcENpdGllc0N1cnJlbnRDb25kaXRpb25EYXRhLFxyXG4gICAgSUN1cnJlbnRDb25kaXRpb25EYXRhLFxyXG59IGZyb20gXCIuL0ludGVyZmFjZXMvQ3VycmVudENvbmRpdGlvbkFQSURhdGFcIjtcclxuaW1wb3J0IHsgSVZhbHVlV2l0aFVuaXQsIElNZXRyaWNBbmRJbXBlcmlhbERhdGEgfSBmcm9tIFwiLi9JbnRlcmZhY2VzL090aGVyXCI7XHJcbmltcG9ydCBBY2N1V2VhdGhlckFQSUVycm9yIGZyb20gXCIuL0Vycm9yL0FjY3VXZWF0aGVyQVBJRXJyb3JcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUluaXRPcHRpb25zIHtcclxuICAgIC8qKlxyXG4gICAgICogQWNjdSBXZWF0aGVyIEFQSSBrZXkuXHJcbiAgICAgKi9cclxuICAgIGFwaWtleTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYW5ndWFnZSBvZiByZXRyaWV2ZSBkYXRhXHJcbiAgICAgKi9cclxuICAgIGxhbmd1YWdlPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHJldHVybiBmdWxsIG9iamVjdCB3aGVuIHNlYXJjaGluZ1xyXG4gICAgICovXHJcbiAgICBkZXRhaWw/OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbGltaXQgdGhhdCBkZXRlcm1pbmVzIHRoZSBmaXJzdCByZXNvdXJjZSB0byBiZSByZXR1cm5lZFxyXG4gICAgICovXHJcbiAgICBvZmZzZXQ/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqICBXaGV0aGVyIG9yIG5vdCB0byByZXR1cm4gbWV0cmljIHZhbHVlcy5cclxuICAgICAqL1xyXG4gICAgbWV0cmljPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY2xpZW50IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIGFsbCBhcGlzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY2N1V2VhdGhlckNsaWVudCB7XHJcbiAgICAvKipcclxuICAgICAqIEFjY3UgV2VhdGhlciBBUEkga2V5LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXBpa2V5OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIExhbmd1YWdlIG9mIHJldHJpZXZlIGRhdGFcclxuICAgICAqL1xyXG4gICAgcHVibGljIGxhbmd1YWdlOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgcmV0dXJuIGZ1bGwgb2JqZWN0IHdoZW4gc2VhcmNoaW5nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZXRhaWw6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBsaW1pdCB0aGF0IGRldGVybWluZXMgdGhlIGZpcnN0IHJlc291cmNlIHRvIGJlIHJldHVybmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvZmZzZXQ6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogIFdoZXRoZXIgb3Igbm90IHRvIHJldHVybiBtZXRyaWMgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWV0cmljOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb2NhdGlvbiBBUEkgQ2xpZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBsb2NhdGlvbjogTG9jYXRpb25BUEk7XHJcbiAgICAvKipcclxuICAgICAqIEZvcmVjYXN0IEFQSSBDbGllbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZvcmVjYXN0OiBGb3JlY2FzdEFQSTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogSUluaXRPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5hcGlrZXkgPSBvcHRpb25zLmFwaWtleTtcclxuICAgICAgICB0aGlzLmxhbmd1YWdlID0gb3B0aW9ucy5sYW5ndWFnZSA/PyBcImVuLXVzXCI7XHJcbiAgICAgICAgdGhpcy5kZXRhaWwgPSBvcHRpb25zLmRldGFpbCA/PyBmYWxzZTtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9wdGlvbnMub2Zmc2V0ID8/IDEwMDtcclxuICAgICAgICB0aGlzLm1ldHJpYyA9IG9wdGlvbnMubWV0cmljID8/IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBuZXcgTG9jYXRpb25BUEkob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5mb3JlY2FzdCA9IG5ldyBGb3JlY2FzdEFQSShvcHRpb25zKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIExvY2F0aW9uQVBJLFxyXG4gICAgRm9yZWNhc3RBUEksXHJcbiAgICBJRGFpbHlGb3JlY2FzdERhdGEsXHJcbiAgICBJSG91cmx5Rm9yZWNhc3REYXRhLFxyXG4gICAgSVJlZ2lvbkRhdGEsXHJcbiAgICBJQ291bnRyeURhdGEsXHJcbiAgICBJQ2l0eURhdGEsXHJcbiAgICBJQXV0b0NvbXBsZXRlU2VhcmNoRGF0YSxcclxuICAgIElBZG1pbkFyZWFEYXRhLFxyXG4gICAgSURheU5pZ2h0V2VhdGhlclN1bW1hcnksXHJcbiAgICBJVmFsdWVXaXRoVW5pdCxcclxuICAgIElIZWFkbGluZURhdGEsXHJcbiAgICBJRGFpbHlGb3JjYXN0RGF0YSxcclxuICAgIElDaXR5RGV0YWlscyxcclxuICAgIElUb3BDaXRpZXNDdXJyZW50Q29uZGl0aW9uRGF0YSxcclxuICAgIElCYXNlQ2l0eURhdGEsXHJcbiAgICBJTWV0cmljQW5kSW1wZXJpYWxEYXRhLFxyXG4gICAgQ3VycmVudENvbmRpdGlvbkFQSSxcclxuICAgIEFQSUNsaWVudEJhc2UsXHJcbiAgICBBY2N1V2VhdGhlckFQSUVycm9yLFxyXG4gICAgSUN1cnJlbnRDb25kaXRpb25EYXRhLFxyXG59O1xyXG4iXX0=