"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"ForecastAPIData.js","sourceRoot":"","sources":["../../TypeScript/Interfaces/ForecastAPIData.ts"],"names":[],"mappings":"","sourcesContent":["import { IValueWithUnit } from \"./Other\";\r\n\r\n/**\r\n * Fields description are from Accu Weather API playground:\r\n * {@link https://developer.accuweather.com/accuweather-forecast-api/apis/get/forecasts/v1/daily/1day/%7BlocationKey%7D}\r\n */\r\nexport interface IDailyForecastData {\r\n    /**\r\n     * Headline Data\r\n     */\r\n    Headline: IHeadlineData;\r\n    /**\r\n     * DailyForecast Data\r\n     */\r\n    DailyForecasts: IDailyForcastData[];\r\n}\r\n\r\n/**\r\n * Fields description are from Accu Weather API playground:\r\n * {@link https://developer.accuweather.com/accuweather-forecast-api/apis/get/forecasts/v1/daily/1day/%7BlocationKey%7D}\r\n */\r\nexport interface IHeadlineData {\r\n    /**\r\n     * DateTime, displayed in ISO8601 format\r\n     */\r\n    EffectiveDate: string;\r\n    /**\r\n     * Effective Date of the headline, displayed as the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n     */\r\n    EffectiveEpochDate: number;\r\n    /**\r\n     * Severity of the headline, displayed as an integer. The lower the number, the greater the severity.\r\n     * 0 = Unknown 1 = Significant 2 = Major 3 = Moderate 4 = Minor 5 = Minimal 6 = Insignificant 7 = Informational\r\n     */\r\n    Severity: number;\r\n    /**\r\n     * Text of the headline, which represents the most significant weather event over the next 5 days.\r\n     */\r\n    Text: string;\r\n    /**\r\n     * Category of the headline.\r\n     */\r\n    Category: string;\r\n    /**\r\n     * DateTime, displayed in ISO8601 format\r\n     */\r\n    EndDate: string;\r\n    /**\r\n     * End Date of the headline, displayed as the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n     */\r\n    EndEpochDate: number;\r\n    /**\r\n     * Link to the extended forecast for the requested location on AccuWeather`s mobile site.\r\n     */\r\n    MobileLink: string;\r\n    /**\r\n     * Link to the extended forecast for the requested location on AccuWeather`s web site.\r\n     */\r\n    Link: string;\r\n}\r\n\r\n/**\r\n * Fields description are from Accu Weather API playground:\r\n * {@link https://developer.accuweather.com/accuweather-forecast-api/apis/get/forecasts/v1/daily/1day/%7BlocationKey%7D}\r\n */\r\nexport interface IDailyForcastData {\r\n    /**\r\n     * DateTime of the forecast, displayed in ISO8601 format.\r\n     */\r\n    Date: string;\r\n    /**\r\n     * Date of the forecast, displayed as the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n     */\r\n    EpochDate: number;\r\n    /**\r\n     * Data of sun rises time and set time (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Sun?: {\r\n        /**\r\n         * Sun rise displayed in ISO8601 format.\r\n         */\r\n        Rise: string;\r\n        /**\r\n         * Sun rise displayed as the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n         */\r\n        EpochRise: number;\r\n        /**\r\n         * Sun set displayed in ISO8601 format.\r\n         */\r\n        Set: string;\r\n        /**\r\n         * Sun set displayed as the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n         */\r\n        EpochSet: number;\r\n    };\r\n    /**\r\n     * Data of moon rises time and set time (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Moon?: {\r\n        /**\r\n         * Moon rise displayed in ISO8601 format.\r\n         */\r\n        Rise: string;\r\n        /**\r\n         * Moon rise displayed as the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n         */\r\n        EpochRise: number;\r\n        /**\r\n         * Moon set displayed in ISO8601 format.\r\n         */\r\n        Set: string;\r\n        /**\r\n         * Moon set displayed as the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n         */\r\n        EpochSet: number;\r\n        /**\r\n         * \tMoon phase.\r\n         */\r\n        Phase: string;\r\n        /**\r\n         * The number of days since the new moon\r\n         */\r\n        Age: number;\r\n    };\r\n    /**\r\n     * Temperature Data\r\n     */\r\n    Temperature: {\r\n        Minimum: IValueWithUnit;\r\n        Maximum: IValueWithUnit;\r\n    };\r\n    /**\r\n     * RealFeelTemperature Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    RealFeelTemperature?: {\r\n        Minimum: IValueWithUnit;\r\n        Maximum: IValueWithUnit;\r\n    };\r\n    /**\r\n     * RealFeelTemperatureShade Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    RealFeelTemperatureShade?: {\r\n        Minimum: IValueWithUnit;\r\n        Maximum: IValueWithUnit;\r\n    };\r\n    /**\r\n     * Number of hours of sun. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    HoursOfSun?: number;\r\n    /**\r\n     * DegreeDaySummary Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    DegreeDaySummary?: {\r\n        /**\r\n         * Degrees that the mean temperature is below 65 degrees F.\r\n         */\r\n        Heating: IValueWithUnit;\r\n        /**\r\n         * Degrees that the mean temperature is above 65 degrees F.\r\n         */\r\n        Cooling: IValueWithUnit;\r\n    };\r\n\r\n    /**\r\n     * AirAndPollen Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    AirAndPollen?: {\r\n        /**\r\n         * \tName of the pollen or air pollutant.\r\n         */\r\n        Name: string;\r\n        /**\r\n         * \tValue of the pollutant. Values associated with mold, grass, weed, and tree are displayed in parts per cubic meter. Air quality and UV index are indices and are unitless. May be NULL.\r\n         */\r\n        Value: number;\r\n        /**\r\n         * Category of the pollution. (low, high, good, moderate, unhealthy, hazardous)\r\n         */\r\n        Category: string;\r\n        /**\r\n         * Value associated with the category. These values range from 1 to 6, with 1 implying good conditions and 6 implying hazardous conditions.\r\n         */\r\n        CategoryValue: number;\r\n        /**\r\n         * \tOnly exists for air quality. Examples include ozone and particle pollution.\r\n         */\r\n        Type?: string;\r\n    }[];\r\n    /**\r\n     * Day Data\r\n     */\r\n    Day: IDayNightWeatherSummary;\r\n    /**\r\n     * Night Data\r\n     */\r\n    Night: IDayNightWeatherSummary;\r\n    /**\r\n     * \tForecast sources.\r\n     */\r\n    Sources: string[];\r\n    /**\r\n     * Link to the daily forecast for the requested location on AccuWeather`s mobile site.\r\n     */\r\n    MobileLink: string;\r\n    /**\r\n     * Link to the daily forecast for the requested location on AccuWeather`s web site.\r\n     */\r\n    Link: string;\r\n}\r\n\r\n/**\r\n * Fields description are from Accu Weather API playground:\r\n * {@link https://developer.accuweather.com/accuweather-forecast-api/apis/get/forecasts/v1/hourly/1hour/%7BlocationKey%7D}\r\n */\r\nexport interface IHourlyForecastData {\r\n    /**\r\n     * DateTime of the forecast, displayed in ISO8601 format.\r\n     */\r\n    DateTime: string;\r\n    /**\r\n     * DateTime of the forecast, displayed as the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n     */\r\n    EpochDateTime: number;\r\n    /**\r\n     * \tNumeric value representing an image that displays the current condition described by WeatherText.\r\n     */\r\n    WeatherIcon: number;\r\n    /**\r\n     * Phrase description of the forecast associated with the WeatherIcon.\r\n     */\r\n    IconPhrase: string;\r\n    /**\r\n     * Boolean value that indicates the presence of any type of precipitation for a given night.\r\n     */\r\n    HasPrecipitation: boolean;\r\n    /**\r\n     * \tIndicates if the precipitation strength is light, moderate, or heavy.\r\n     */\r\n    PrecipitationType: string;\r\n    /**\r\n     * Indicates if the precipitation strength is light, moderate, or heavy.\r\n     */\r\n    PrecipitationIntensity: string;\r\n    /**\r\n     * \tSpecifies whether or not it is daylight (true=daylight, false=not daylight).\r\n     */\r\n    IsDaylight: boolean;\r\n    /**\r\n     * Temperature Data\r\n     */\r\n    Temperature: IValueWithUnit;\r\n    /**\r\n     * RealFeelTemperature Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    RealFeelTemperature?: IValueWithUnit;\r\n    /**\r\n     * RealFeelTemperatureShade Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    RealFeelTemperatureShade?: IValueWithUnit;\r\n    /**\r\n     * The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    WetBulbTemperature?: IValueWithUnit;\r\n    /**\r\n     * Dew Point temperature. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    DewPoint?: IValueWithUnit;\r\n    /**\r\n     * Wind data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Wind?: {\r\n        /**\r\n         * Wind speed\r\n         */\r\n        Speed: IValueWithUnit;\r\n        /**\r\n         * Wind direction Data\r\n         */\r\n        Direction: {\r\n            /**\r\n             * Wind direction in azimuth degrees\r\n             */\r\n            Degrees: number;\r\n            /**\r\n             * Direction abbreviation in the specified language.\r\n             */\r\n            Localized: string;\r\n            /**\r\n             * Direction abbreviation in English.\r\n             */\r\n            English: string;\r\n        };\r\n    };\r\n    /**\r\n     * WindGust Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    WindGust?: {\r\n        /**\r\n         * WindGust speed data\r\n         */\r\n        Speed: IValueWithUnit;\r\n        /**\r\n         * WindGust direction Data\r\n         */\r\n        Direction: {\r\n            /**\r\n             * WindGust direction in azimuth degrees\r\n             */\r\n            Degrees: number;\r\n            /**\r\n             * Direction abbreviation in the specified language.\r\n             */\r\n            Localized: string;\r\n            /**\r\n             * Direction abbreviation in English.\r\n             */\r\n            English: string;\r\n        };\r\n    };\r\n    /**\r\n     * Relative Humidity (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    RelativeHumidity?: number;\r\n    /**\r\n     * Indoor Relative Humidity (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    IndoorRelativeHumidity?: number;\r\n    /**\r\n     * Visibility Data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Visibility?: IValueWithUnit;\r\n    /**\r\n     * Celling Data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Ceiling?: IValueWithUnit;\r\n    /**\r\n     * Measure of the strength of the ultraviolet radiation from the sun. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    UVIndex?: number;\r\n    /**\r\n     * Text associated with the UVIndex. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    UVIndexText?: string;\r\n    /**\r\n     * Percent representing the probability of precipitation.  (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    PrecipitationProbability: number;\r\n    /**\r\n     * Percent representing the probability of thunderstorm.  (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    ThunderstormProbability?: number;\r\n    /**\r\n     * Percent representing the probability of rain.  (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    RainProbability?: number;\r\n    /**\r\n     * Percent representing the probability of snow.  (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    SnowProbability?: number;\r\n    /**\r\n     * Percent representing the probability of ice.  (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    IceProbability?: number;\r\n    /**\r\n     * TotalLiquid data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    TotalLiquid?: IValueWithUnit;\r\n    /**\r\n     * Rain data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Rain?: IValueWithUnit;\r\n    /**\r\n     * Snow data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Snow?: IValueWithUnit;\r\n    /**\r\n     * Ice data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Ice?: IValueWithUnit;\r\n    /**\r\n     * Number representing the percentage of the sky that is covered by clouds. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    CloudCover?: number;\r\n    /**\r\n     * Evapotranspiration Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Evapotranspiration?: IValueWithUnit;\r\n    /**\r\n     * SolarIrradiance Data (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    SolarIrradiance?: IValueWithUnit;\r\n    /**\r\n     * Link to the hourly forecast for the requested location on AccuWeather`s mobile site.\r\n     */\r\n    MobileLink: string;\r\n    /**\r\n     * Link to the hourly forecast for the requested location on AccuWeather`s web site.\r\n     */\r\n    Link: string;\r\n}\r\n\r\n/**\r\n * Fields description are from Accu Weather API playground:\r\n * {@link https://developer.accuweather.com/accuweather-forecast-api/apis/get/forecasts/v1/daily/1day/%7BlocationKey%7D}\r\n */\r\nexport interface IDayNightWeatherSummary {\r\n    /**\r\n     * Numeric value representing an icon that matches the forecast.\r\n     */\r\n    Icon: number;\r\n    /**\r\n     * Phrase description of the icon.\r\n     */\r\n    IconPhrase: string;\r\n    /**\r\n     * Boolean value that indicates the presence of any type of precipitation for a given day.\r\n     */\r\n    HasPrecipitation: boolean;\r\n    /**\r\n     * Indicates if the precipitation is rain, snow, ice, or mixed.\r\n     */\r\n    PrecipitationType: string;\r\n    /**\r\n     * ndicates if the precipitation strength is light, moderate, or heavy.\r\n     */\r\n    PrecipitationIntensity: string;\r\n    /**\r\n     * LocalSource Data\r\n     */\r\n    LocalSource: {\r\n        /**\r\n         * Numeric identifier, unique to the local data provider.\r\n         */\r\n        Id: number;\r\n        /**\r\n         * Name of the local data provider.\r\n         */\r\n        Name: string;\r\n        /**\r\n         * Weather code provided by the local data provider.\r\n         */\r\n        WeatherCode: string;\r\n    };\r\n    /**\r\n     * Phrase description of the forecast. Under 30 characters in length. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    ShortPhrase?: string;\r\n    /**\r\n     * Phrase description of the forecast. Under 100 characters in length. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    LongPhrase?: string;\r\n    /**\r\n     * Percent representing the probability of precipitation. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    PrecipitationProbability?: number;\r\n    /**\r\n     * Percent representing the probability of a thunderstorm. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    ThunderstormProbability?: number;\r\n    /**\r\n     * Percent representing the probability of rain. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    RainProbability?: number;\r\n    /**\r\n     * Percent representing the probability of snow. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    SnowProbability?: number;\r\n    /**\r\n     * Percent representing the probability of ice. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    IceProbability?: number;\r\n    /**\r\n     * Wind data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Wind?: {\r\n        /**\r\n         * Wind speed\r\n         */\r\n        Speed: IValueWithUnit;\r\n        /**\r\n         * Wind direction Data\r\n         */\r\n        Direction: {\r\n            /**\r\n             * Wind direction in azimuth degrees\r\n             */\r\n            Degrees: number;\r\n            /**\r\n             * Direction abbreviation in the specified language.\r\n             */\r\n            Localized: string;\r\n            /**\r\n             * Direction abbreviation in English.\r\n             */\r\n            English: string;\r\n        };\r\n    };\r\n    /**\r\n     * WindGust data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    WindGust?: {\r\n        /**\r\n         * WindGust speed\r\n         */\r\n        Speed: IValueWithUnit;\r\n        /**\r\n         * WindGust direction Data\r\n         */\r\n        Direction: {\r\n            /**\r\n             * WindGust direction in azimuth degrees\r\n             */\r\n            Degrees: number;\r\n            /**\r\n             * Direction abbreviation in the specified language.\r\n             */\r\n            Localized: string;\r\n            /**\r\n             * Direction abbreviation in English.\r\n             */\r\n            English: string;\r\n        };\r\n    };\r\n    /**\r\n     * TotalLiquid data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    TotalLiquid?: IValueWithUnit;\r\n    /**\r\n     * Rain data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Rain?: IValueWithUnit;\r\n    /**\r\n     * Snow data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Snow?: IValueWithUnit;\r\n    /**\r\n     * Ice data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Ice?: IValueWithUnit;\r\n    /**\r\n     * Number of hours of precipitation of any type. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    HoursOfPrecipitation?: number;\r\n    /**\r\n     * Number of hours of rain. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    HoursOfRain?: number;\r\n    /**\r\n     * Number of hours of snow. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    HoursOfSnow?: number;\r\n    /**\r\n     * Number of hours of ice. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    HoursOfIce?: number;\r\n    /**\r\n     * Percent representing cloud cover. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    CloudCover?: number;\r\n    /**\r\n     * Evapotranspiration data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    Evapotranspiration?: IValueWithUnit;\r\n    /**\r\n     * SolarIrradiance data. (Will be undefined if ForecastAPI.details is false)\r\n     */\r\n    SolarIrradiance?: IValueWithUnit;\r\n}\r\n"]}